/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "edgenet/pkg/apis/apps/v1alpha"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AcceptableUsePolicyLister helps list AcceptableUsePolicies.
type AcceptableUsePolicyLister interface {
	// List lists all AcceptableUsePolicies in the indexer.
	List(selector labels.Selector) (ret []*v1alpha.AcceptableUsePolicy, err error)
	// AcceptableUsePolicies returns an object that can list and get AcceptableUsePolicies.
	AcceptableUsePolicies(namespace string) AcceptableUsePolicyNamespaceLister
	AcceptableUsePolicyListerExpansion
}

// acceptableUsePolicyLister implements the AcceptableUsePolicyLister interface.
type acceptableUsePolicyLister struct {
	indexer cache.Indexer
}

// NewAcceptableUsePolicyLister returns a new AcceptableUsePolicyLister.
func NewAcceptableUsePolicyLister(indexer cache.Indexer) AcceptableUsePolicyLister {
	return &acceptableUsePolicyLister{indexer: indexer}
}

// List lists all AcceptableUsePolicies in the indexer.
func (s *acceptableUsePolicyLister) List(selector labels.Selector) (ret []*v1alpha.AcceptableUsePolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.AcceptableUsePolicy))
	})
	return ret, err
}

// AcceptableUsePolicies returns an object that can list and get AcceptableUsePolicies.
func (s *acceptableUsePolicyLister) AcceptableUsePolicies(namespace string) AcceptableUsePolicyNamespaceLister {
	return acceptableUsePolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AcceptableUsePolicyNamespaceLister helps list and get AcceptableUsePolicies.
type AcceptableUsePolicyNamespaceLister interface {
	// List lists all AcceptableUsePolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha.AcceptableUsePolicy, err error)
	// Get retrieves the AcceptableUsePolicy from the indexer for a given namespace and name.
	Get(name string) (*v1alpha.AcceptableUsePolicy, error)
	AcceptableUsePolicyNamespaceListerExpansion
}

// acceptableUsePolicyNamespaceLister implements the AcceptableUsePolicyNamespaceLister
// interface.
type acceptableUsePolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AcceptableUsePolicies in the indexer for a given namespace.
func (s acceptableUsePolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha.AcceptableUsePolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.AcceptableUsePolicy))
	})
	return ret, err
}

// Get retrieves the AcceptableUsePolicy from the indexer for a given namespace and name.
func (s acceptableUsePolicyNamespaceLister) Get(name string) (*v1alpha.AcceptableUsePolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("acceptableusepolicy"), name)
	}
	return obj.(*v1alpha.AcceptableUsePolicy), nil
}
