/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "edgenet/pkg/apis/apps/v1alpha"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LoginLister helps list Logins.
type LoginLister interface {
	// List lists all Logins in the indexer.
	List(selector labels.Selector) (ret []*v1alpha.Login, err error)
	// Logins returns an object that can list and get Logins.
	Logins(namespace string) LoginNamespaceLister
	LoginListerExpansion
}

// loginLister implements the LoginLister interface.
type loginLister struct {
	indexer cache.Indexer
}

// NewLoginLister returns a new LoginLister.
func NewLoginLister(indexer cache.Indexer) LoginLister {
	return &loginLister{indexer: indexer}
}

// List lists all Logins in the indexer.
func (s *loginLister) List(selector labels.Selector) (ret []*v1alpha.Login, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.Login))
	})
	return ret, err
}

// Logins returns an object that can list and get Logins.
func (s *loginLister) Logins(namespace string) LoginNamespaceLister {
	return loginNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoginNamespaceLister helps list and get Logins.
type LoginNamespaceLister interface {
	// List lists all Logins in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha.Login, err error)
	// Get retrieves the Login from the indexer for a given namespace and name.
	Get(name string) (*v1alpha.Login, error)
	LoginNamespaceListerExpansion
}

// loginNamespaceLister implements the LoginNamespaceLister
// interface.
type loginNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Logins in the indexer for a given namespace.
func (s loginNamespaceLister) List(selector labels.Selector) (ret []*v1alpha.Login, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.Login))
	})
	return ret, err
}

// Get retrieves the Login from the indexer for a given namespace and name.
func (s loginNamespaceLister) Get(name string) (*v1alpha.Login, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("login"), name)
	}
	return obj.(*v1alpha.Login), nil
}
