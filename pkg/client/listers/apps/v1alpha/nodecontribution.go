/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "edgenet/pkg/apis/apps/v1alpha"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeContributionLister helps list NodeContributions.
type NodeContributionLister interface {
	// List lists all NodeContributions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha.NodeContribution, err error)
	// NodeContributions returns an object that can list and get NodeContributions.
	NodeContributions(namespace string) NodeContributionNamespaceLister
	NodeContributionListerExpansion
}

// nodeContributionLister implements the NodeContributionLister interface.
type nodeContributionLister struct {
	indexer cache.Indexer
}

// NewNodeContributionLister returns a new NodeContributionLister.
func NewNodeContributionLister(indexer cache.Indexer) NodeContributionLister {
	return &nodeContributionLister{indexer: indexer}
}

// List lists all NodeContributions in the indexer.
func (s *nodeContributionLister) List(selector labels.Selector) (ret []*v1alpha.NodeContribution, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.NodeContribution))
	})
	return ret, err
}

// NodeContributions returns an object that can list and get NodeContributions.
func (s *nodeContributionLister) NodeContributions(namespace string) NodeContributionNamespaceLister {
	return nodeContributionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeContributionNamespaceLister helps list and get NodeContributions.
type NodeContributionNamespaceLister interface {
	// List lists all NodeContributions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha.NodeContribution, err error)
	// Get retrieves the NodeContribution from the indexer for a given namespace and name.
	Get(name string) (*v1alpha.NodeContribution, error)
	NodeContributionNamespaceListerExpansion
}

// nodeContributionNamespaceLister implements the NodeContributionNamespaceLister
// interface.
type nodeContributionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeContributions in the indexer for a given namespace.
func (s nodeContributionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha.NodeContribution, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.NodeContribution))
	})
	return ret, err
}

// Get retrieves the NodeContribution from the indexer for a given namespace and name.
func (s nodeContributionNamespaceLister) Get(name string) (*v1alpha.NodeContribution, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("nodecontribution"), name)
	}
	return obj.(*v1alpha.NodeContribution), nil
}
