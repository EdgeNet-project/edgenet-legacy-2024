/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "headnode/pkg/apis/apps/v1alpha"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SliceLister helps list Slices.
type SliceLister interface {
	// List lists all Slices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha.Slice, err error)
	// Slices returns an object that can list and get Slices.
	Slices(namespace string) SliceNamespaceLister
	SliceListerExpansion
}

// sliceLister implements the SliceLister interface.
type sliceLister struct {
	indexer cache.Indexer
}

// NewSliceLister returns a new SliceLister.
func NewSliceLister(indexer cache.Indexer) SliceLister {
	return &sliceLister{indexer: indexer}
}

// List lists all Slices in the indexer.
func (s *sliceLister) List(selector labels.Selector) (ret []*v1alpha.Slice, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.Slice))
	})
	return ret, err
}

// Slices returns an object that can list and get Slices.
func (s *sliceLister) Slices(namespace string) SliceNamespaceLister {
	return sliceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SliceNamespaceLister helps list and get Slices.
type SliceNamespaceLister interface {
	// List lists all Slices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha.Slice, err error)
	// Get retrieves the Slice from the indexer for a given namespace and name.
	Get(name string) (*v1alpha.Slice, error)
	SliceNamespaceListerExpansion
}

// sliceNamespaceLister implements the SliceNamespaceLister
// interface.
type sliceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Slices in the indexer for a given namespace.
func (s sliceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha.Slice, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.Slice))
	})
	return ret, err
}

// Get retrieves the Slice from the indexer for a given namespace and name.
func (s sliceNamespaceLister) Get(name string) (*v1alpha.Slice, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("slice"), name)
	}
	return obj.(*v1alpha.Slice), nil
}
