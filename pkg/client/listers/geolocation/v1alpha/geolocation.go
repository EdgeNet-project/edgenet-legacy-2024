/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha

import (
	v1alpha "headnode/pkg/apis/geolocation/v1alpha"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GeoLocationLister helps list GeoLocations.
type GeoLocationLister interface {
	// List lists all GeoLocations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha.GeoLocation, err error)
	// GeoLocations returns an object that can list and get GeoLocations.
	GeoLocations(namespace string) GeoLocationNamespaceLister
	GeoLocationListerExpansion
}

// geoLocationLister implements the GeoLocationLister interface.
type geoLocationLister struct {
	indexer cache.Indexer
}

// NewGeoLocationLister returns a new GeoLocationLister.
func NewGeoLocationLister(indexer cache.Indexer) GeoLocationLister {
	return &geoLocationLister{indexer: indexer}
}

// List lists all GeoLocations in the indexer.
func (s *geoLocationLister) List(selector labels.Selector) (ret []*v1alpha.GeoLocation, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.GeoLocation))
	})
	return ret, err
}

// GeoLocations returns an object that can list and get GeoLocations.
func (s *geoLocationLister) GeoLocations(namespace string) GeoLocationNamespaceLister {
	return geoLocationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GeoLocationNamespaceLister helps list and get GeoLocations.
type GeoLocationNamespaceLister interface {
	// List lists all GeoLocations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha.GeoLocation, err error)
	// Get retrieves the GeoLocation from the indexer for a given namespace and name.
	Get(name string) (*v1alpha.GeoLocation, error)
	GeoLocationNamespaceListerExpansion
}

// geoLocationNamespaceLister implements the GeoLocationNamespaceLister
// interface.
type geoLocationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GeoLocations in the indexer for a given namespace.
func (s geoLocationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha.GeoLocation, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha.GeoLocation))
	})
	return ret, err
}

// Get retrieves the GeoLocation from the indexer for a given namespace and name.
func (s geoLocationNamespaceLister) Get(name string) (*v1alpha.GeoLocation, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha.Resource("geolocation"), name)
	}
	return obj.(*v1alpha.GeoLocation), nil
}
