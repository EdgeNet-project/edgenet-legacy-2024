/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/EdgeNet-project/edgenet/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubNamespaceLister helps list SubNamespaces.
// All objects returned here must be treated as read-only.
type SubNamespaceLister interface {
	// List lists all SubNamespaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubNamespace, err error)
	// SubNamespaces returns an object that can list and get SubNamespaces.
	SubNamespaces(namespace string) SubNamespaceNamespaceLister
	SubNamespaceListerExpansion
}

// subNamespaceLister implements the SubNamespaceLister interface.
type subNamespaceLister struct {
	indexer cache.Indexer
}

// NewSubNamespaceLister returns a new SubNamespaceLister.
func NewSubNamespaceLister(indexer cache.Indexer) SubNamespaceLister {
	return &subNamespaceLister{indexer: indexer}
}

// List lists all SubNamespaces in the indexer.
func (s *subNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubNamespace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubNamespace))
	})
	return ret, err
}

// SubNamespaces returns an object that can list and get SubNamespaces.
func (s *subNamespaceLister) SubNamespaces(namespace string) SubNamespaceNamespaceLister {
	return subNamespaceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubNamespaceNamespaceLister helps list and get SubNamespaces.
// All objects returned here must be treated as read-only.
type SubNamespaceNamespaceLister interface {
	// List lists all SubNamespaces in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubNamespace, err error)
	// Get retrieves the SubNamespace from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SubNamespace, error)
	SubNamespaceNamespaceListerExpansion
}

// subNamespaceNamespaceLister implements the SubNamespaceNamespaceLister
// interface.
type subNamespaceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubNamespaces in the indexer for a given namespace.
func (s subNamespaceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubNamespace, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubNamespace))
	})
	return ret, err
}

// Get retrieves the SubNamespace from the indexer for a given namespace and name.
func (s subNamespaceNamespaceLister) Get(name string) (*v1alpha1.SubNamespace, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subnamespace"), name)
	}
	return obj.(*v1alpha1.SubNamespace), nil
}
